/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.util.Scanner

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val scanner = Scanner(System.`in`)
        println("Welcome to Number Guessing Game!")
        println("Try to guess the number.")

        val numberToGuess = generateRandomNonRepeatingNumber(digitsToGuess)
        var isCorrect = false

        println("Secret number has been generated. Let's begin!")
        println(numberToGuess)

        do {
            print("Enter your guess (a ${digitsToGuess}-digit number): ")
            val userGuess = scanner.nextLine()

            val (correctDigits, correctPositions) = checkUserInputAgainstGeneratedNumber(userGuess.toInt(), numberToGuess)

            println("Output: $correctDigits:$correctPositions")

            if (correctPositions == digitsToGuess) {
                println("Congratulations! You guessed the correct number: $numberToGuess")
                isCorrect = true
            }
        } while (!isCorrect)
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        val digits = mutableListOf<Int>()
        while (digits.size < length) {
            val digit = (1..9).random()
            if (!digits.contains(digit)) {
                digits.add(digit)
            }
        }
        digits.joinToString("").toInt()
        //0   // return value is a placeholder
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        var correctDigits = 0
        var correctPositions = 0
        val inputDigits = convertIntToList(input)
        val generatedNumberDigits = convertIntToList(generatedNumber)

        for (i in inputDigits.indices) {
            if (inputDigits.contains(generatedNumberDigits[i])) {
                correctDigits++
            }
            if (inputDigits[i] == generatedNumberDigits[i]) {
                correctPositions++
            }
        }
        CompareResult(correctDigits, correctPositions)   // return value is a placeholder
    }

    val convertIntToList: (Int) -> List<Int> = { number ->
        var tempNumber = number
        val digits = mutableListOf<Int>()
        while (tempNumber > 0) {
            val digit = tempNumber % 10
            digits.add(0, digit)
            tempNumber /= 10
        }
        digits
    }
}

fun main() {
    println("Hello World!")
    val game = App()
    game.playNumberGame(4)
    // TODO: call the App.playNumberGame function with and without default arguments
}
